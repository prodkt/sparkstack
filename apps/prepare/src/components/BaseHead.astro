---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "../styles/sparkstack_globals.css";
import "@/styles/sparkstack_globals.css";
import "../env.d.ts";

import { ClientRouter } from "astro:transitions";
interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/blog-placeholder-1.jpg" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<!-- <link rel="preload" href="/fonts/fonts/complete/TT_Hoves_Pro_Variable.woff" as="font" type="font/woff" crossorigin /> -->
<!-- <link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin /> -->
<link href="/fonts/fonts.css" type="css/stylesheet" />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ClientRouter />

<script is:inline>
  function initializeTheme() {
    const getThemePreference = () => {
      if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
        return localStorage.getItem("theme");
      }

      if (typeof window !== "undefined") {
        const darkQuery = window.matchMedia("(prefers-color-scheme: dark)");
        if (darkQuery.matches) return "dark";
      }

      return "light";
    };

    const theme = getThemePreference();

    if (typeof window !== "undefined") {
      // Remove any existing theme classes first
      document.documentElement.classList.remove('light', 'dark');

      const effectiveTheme = theme === 'system'
        ? (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
        : theme;

      // Add the new theme class
      document.documentElement.classList.add(effectiveTheme);

      // Use requestAnimationFrame to ensure smooth transitions
      requestAnimationFrame(() => {
        // Update localStorage
        localStorage.setItem("theme", theme);

        // Update cookie
        document.cookie = `data-theme=${theme};path=/;max-age=31536000`;

        // Update data-theme attribute
        document.documentElement.setAttribute("data-theme", effectiveTheme);
      });
    }
  }

  // Initialize theme
  initializeTheme();

  // Add system theme change listener
  if (typeof window !== "undefined") {
    const darkModeMediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    darkModeMediaQuery.addEventListener("change", (e) => {
      const theme = localStorage.getItem("theme");
      if (theme === "system") {
        document.documentElement.classList.remove('light', 'dark');
        document.documentElement.classList.add(e.matches ? "dark" : "light");
        document.documentElement.setAttribute("data-theme", e.matches ? "dark" : "light");
      }
    });
  }

  // Initialize color schemes
  const initializeColorScheme = (attribute, defaultValue) => {
    const stored = localStorage.getItem(attribute);
    const value = stored || defaultValue;
    localStorage.setItem(attribute, value);
    document.documentElement.setAttribute(`data-${attribute}`, value);
  };

  // Initialize all color schemes
  initializeColorScheme("primary-color", "lime");
  initializeColorScheme("gray-color", "olive");
  initializeColorScheme("secondary-color", "mint");
  initializeColorScheme("accent-color", "lime");

  // Theme observer
  if (typeof window !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
