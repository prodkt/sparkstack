{
  "name": "prodkt-mode-toggle",
  "type": "registry:prodkt",
  "files": [
    {
      "path": "prodkt/prodkt-mode-toggle.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Moon, Sun } from \"lucide-react\"\n\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\"\n\nexport function ProdktModeToggle() {\n  const [theme, setThemeState] = React.useState<\"light\" | \"dark\" | \"system\">(\n    () => {\n      if (typeof window === \"undefined\") return \"system\"\n      return (\n        (localStorage.getItem(\"theme\") as \"light\" | \"dark\" | \"system\") ||\n        \"system\"\n      )\n    }\n  )\n\n  const getEffectiveTheme = (newTheme: \"light\" | \"dark\" | \"system\") => {\n    if (newTheme === \"system\") {\n      return window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n        ? \"dark\"\n        : \"light\"\n    }\n    return newTheme\n  }\n\n  const updateTheme = (newTheme: \"light\" | \"dark\" | \"system\") => {\n    if (typeof window !== \"undefined\") {\n      const effectiveTheme = getEffectiveTheme(newTheme)\n\n      // Update state and storage\n      setThemeState(newTheme)\n      localStorage.setItem(\"theme\", newTheme)\n\n      // Update DOM\n      document.documentElement.classList.remove(\"light\", \"dark\")\n      document.documentElement.classList.add(effectiveTheme)\n      document.documentElement.setAttribute(\"data-theme\", effectiveTheme)\n    }\n  }\n\n  // Listen for system theme changes\n  React.useEffect(() => {\n    if (theme === \"system\") {\n      const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\")\n      const handleChange = () => {\n        const effectiveTheme = getEffectiveTheme(\"system\")\n        document.documentElement.classList.remove(\"light\", \"dark\")\n        document.documentElement.classList.add(effectiveTheme)\n        document.documentElement.setAttribute(\"data-theme\", effectiveTheme)\n      }\n\n      mediaQuery.addEventListener(\"change\", handleChange)\n      return () => mediaQuery.removeEventListener(\"change\", handleChange)\n    }\n  }, [theme])\n\n  return (\n    <DropdownMenu>\n      <div className=\"rounded-full focus-visible:rounded-full [&_button]:rounded-full [&_button]:focus-visible:rounded-full\">\n        <DropdownMenuTrigger\n          className=\"rounded-full [&_button]:rounded-full [&_button]:focus-visible:rounded-full\"\n          asChild\n        >\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"sparkstack-border rounded-full focus-visible:rounded-full\"\n          >\n            <Sun className=\"size-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n            <Moon className=\"absolute size-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n            <span className=\"sr-only\">Toggle theme</span>\n          </Button>\n        </DropdownMenuTrigger>\n      </div>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => updateTheme(\"light\")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => updateTheme(\"dark\")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => updateTheme(\"system\")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:prodkt",
      "target": ""
    }
  ]
}