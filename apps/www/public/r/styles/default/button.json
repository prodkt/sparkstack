{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useCallback } from \"react\"\nimport dynamic from \"next/dynamic\"\nimport { Slot } from \"@radix-ui/react-slot\"\n\nimport { cn } from \"@/lib/utils\"\nimport { useRipple } from \"@/registry/default/hooks/use-ripple\"\nimport {\n  buttonVariants,\n  type ButtonProps,\n} from \"@/registry/default/lib/buttonUtils\"\n\nexport * from \"@/registry/default/lib/buttonUtils\"\n\nconst Ripple = dynamic(\n  () => import(\"@/registry/default/ui/ripple\").then((mod) => mod.default),\n  {\n    ssr: false,\n  }\n)\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      asChild = false,\n      disableRipple = false,\n      onClick,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { ripples, onClick: onRippleClickHandler, onClear } = useRipple()\n\n    const handleClick = useCallback(\n      (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        onRippleClickHandler(e)\n        onClick?.(e)\n      },\n      [onClick, onRippleClickHandler]\n    )\n\n    const getRippleProps = useCallback(\n      () => ({ ripples, onClear }),\n      [ripples, onClear]\n    )\n\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className=\"flex items-center justify-center p-0\"\n        ref={ref}\n        onClick={handleClick}\n      >\n        <span\n          {...props}\n          className={cn(buttonVariants({ variant, size, className }))}\n        >\n          {children}\n          {!disableRipple && <Ripple {...getRippleProps()} />}\n        </span>\n      </Comp>\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}