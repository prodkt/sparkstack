{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { useCallback } from \"react\"\n// import Ripple from \"@/registry/default/ui/ripple\"\nimport dynamic from \"next/dynamic\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport type { HTMLSparkStackProps } from \"@/types/sparkstack\"\n// const useRipple = dynamic(() => import(\"@/registry/default/hooks/use-ripple\").then(mod => mod.useRipple), { ssr: false })\nimport { cn } from \"@/lib/utils\"\nimport { useRipple } from \"@/registry/default/hooks/use-ripple\"\nimport RippleProps from \"@/registry/default/ui/ripple\"\n\nconst Ripple = dynamic(() => import(\"@/registry/default/ui/ripple\"), {\n  ssr: false,\n})\n\nconst buttonVariants = cva(\n  \"relative overflow-hidden inline-flex items-center justify-center place-content-center place-items-center content-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary-hover\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive-hover\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary-hover\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-link hover:text-link-hover active:text-link-active selected:text-link-selected focus:text-link-focus disabled:text-link-disabled underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 [&_svg]:size-5 w-10 px-0 py-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends HTMLSparkStackProps<\"button\">,\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  disableRipple?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      asChild = false,\n      disableRipple = false,\n      onClick,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const {\n      onClick: onRippleClickHandler,\n      onClear: onClearRipple,\n      ripples,\n    } = useRipple()\n\n    const handleClick = useCallback(\n      (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        onRippleClickHandler(e)\n        onClick?.(e)\n      },\n      [onClick, onRippleClickHandler]\n    )\n\n    const getRippleProps = useCallback(\n      () => ({ ripples, onClear: onClearRipple }),\n      [ripples, onClearRipple]\n    )\n\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className=\"flex items-center justify-center p-0\"\n        ref={ref}\n        onClick={handleClick}\n        {...props}\n      >\n        <span className={cn(buttonVariants({ variant, size, className }))}>\n          {children}\n          {!disableRipple && <Ripple {...getRippleProps()} />}\n        </span>\n      </Comp>\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}