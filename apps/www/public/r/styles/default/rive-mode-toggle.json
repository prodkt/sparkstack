{
  "name": "rive-mode-toggle",
  "type": "registry:prodkt",
  "dependencies": [
    "@rive-app/react-canvas"
  ],
  "files": [
    {
      "path": "prodkt/rive/mode-toggle/index.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { Alignment, Fit, Layout, useRive } from \"@rive-app/react-canvas\"\n\nexport default function RiveModeToggle() {\n  // Initialize state based on localStorage/system preference\n  const [isDark, setIsDark] = useState(() => {\n    if (typeof window !== \"undefined\") {\n      const savedTheme = localStorage.getItem(\"theme\")\n      return savedTheme\n        ? savedTheme === \"dark\"\n        : window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n    }\n    return false\n  })\n\n  const RiveAnimation = \"../../assets/rive/nexsale_mode_toggle.riv\"\n\n  const { rive, RiveComponent } = useRive({\n    src: RiveAnimation,\n    stateMachines: \"modeMachine\",\n    layout: new Layout({\n      fit: Fit.FitWidth,\n      alignment: Alignment.Center,\n    }),\n    autoplay: true,\n  })\n\n  useEffect(() => {\n    if (rive) {\n      const input = rive\n        .stateMachineInputs(\"modeMachine\")\n        ?.find((input) => input.name === \"isDark\")\n\n      if (input) {\n        input.value = isDark\n      }\n    }\n  }, [rive, isDark])\n\n  const toggleMode = () => {\n    const newIsDark = !isDark\n    setIsDark(newIsDark)\n\n    // Update localStorage and class\n    if (typeof window !== \"undefined\") {\n      localStorage.setItem(\"theme\", newIsDark ? \"dark\" : \"light\")\n      document.documentElement.classList[newIsDark ? \"add\" : \"remove\"](\"dark\")\n    }\n  }\n\n  // Handle system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\")\n\n    const handleChange = (e: MediaQueryListEvent) => {\n      const newIsDark = e.matches\n      setIsDark(newIsDark)\n      localStorage.setItem(\"theme\", newIsDark ? \"dark\" : \"light\")\n      document.documentElement.classList[newIsDark ? \"add\" : \"remove\"](\"dark\")\n    }\n\n    mediaQuery.addEventListener(\"change\", handleChange)\n    return () => mediaQuery.removeEventListener(\"change\", handleChange)\n  }, [])\n\n  return (\n    <div className=\"size-[36px] rounded-full relative flex items-center justify-center\">\n      <div\n        className=\"z-[1] relative size-[48px] min-w-[48px] min-h-[48px] inset-0 justify-center items-center overflow-hidden\"\n        onClick={toggleMode}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" || e.key === \" \") {\n            toggleMode()\n          }\n        }}\n        aria-label={`Switch to ${isDark ? \"light\" : \"dark\"} mode`}\n      >\n        <RiveComponent />\n      </div>\n      <div className=\"size-[36px] absolute m-auto rounded-full dark:bg-background flex items-center justify-center z-0 inset-0\" />\n    </div>\n  )\n}\n",
      "type": "registry:prodkt",
      "target": ""
    }
  ]
}