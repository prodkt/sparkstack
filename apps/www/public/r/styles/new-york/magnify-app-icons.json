{
  "name": "magnify-app-icons",
  "type": "registry:prodkt",
  "files": [
    {
      "path": "prodkt/magnify-app-icons.tsx",
      "content": "\"use client\"\n\nimport { useRef } from \"react\"\nimport {\n  products as PRODUCTS,\n  PRODUCT_NAMES,\n  PRODUCT_SHORTNAMES,\n} from \"@/shared-data/products\"\nimport {\n  motion,\n  useInView,\n  useMotionValue,\n  useSpring,\n  useTransform,\n  type MotionValue,\n} from \"framer-motion\"\n\nimport { DEFAULT_TRANSITION } from \"@/lib/animations\"\nimport { cn } from \"@/lib/utils\"\nimport { useBreakpoint } from \"@/hooks/use-breakpoint\"\n\nimport type { Products } from \"./app-icons-section\"\n\nfunction MagnifyAppIcons({\n  currentProduct,\n}: {\n  currentProduct: Products | string\n}) {\n  const mouseX = useMotionValue(Number.POSITIVE_INFINITY)\n\n  return (\n    <motion.div\n      onMouseMove={(e) => mouseX.set(e.pageX)}\n      onMouseLeave={() => mouseX.set(Number.POSITIVE_INFINITY)}\n      className=\"relative mx-auto w-full max-w-md grid grid-cols-3 md:flex items-center justify-center gap-y-8 md:gap-2 px-4\"\n    >\n      {Object.entries(products).map(([key, product], i) => (\n        <Product\n          mouseX={mouseX}\n          product={product}\n          isCurrentProduct={product.shortname === currentProduct}\n          index={i}\n          key={key}\n        />\n      ))}\n    </motion.div>\n  )\n}\n\nfunction Product({\n  mouseX,\n  product,\n  index,\n  isCurrentProduct,\n}: {\n  mouseX: MotionValue\n  product: any\n  index: number\n  isCurrentProduct: boolean\n}) {\n  let ref = useRef<HTMLDivElement>(null)\n  const isInView = useInView(ref, { margin: \"-25%\", once: true })\n  const isMobile = useBreakpoint(768)\n\n  let distance = useTransform(mouseX, (val) => {\n    let bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 }\n\n    return val - bounds.x - bounds.width / 2\n  })\n\n  const initialWidth = isMobile ? 50 : 65\n  let widthSync = useTransform(\n    distance,\n    [-100, 0, 100],\n    [initialWidth, 80, initialWidth]\n  )\n  let width = useSpring(widthSync, { mass: 0.1, stiffness: 150, damping: 12 })\n\n  const xDelta = 91\n  const initial = {\n    x: isMobile ? 0 : index * -xDelta + 225,\n  }\n  const animate = {\n    x: 0,\n    transition: { ...DEFAULT_TRANSITION, delay: 0.5 },\n  }\n\n  return (\n    <motion.div\n      ref={ref}\n      className={cn(\n        \"relative mx-auto md:w-[150px] bg-transparent group\",\n        isCurrentProduct ? \"z-10\" : \"z-0\"\n      )}\n      initial={initial}\n      animate={isInView ? animate : initial}\n    >\n      <a\n        href={product.url}\n        className=\"flex w-full flex-col items-center text-center group\"\n      >\n        <motion.div\n          style={isMobile ? (undefined as any) : { width, willChange: \"width\" }}\n          className=\"relative w-[30px] !min-w-[30px] md:!min-w-[50px] aspect-square will-change-transform bg-background rounded-xl border p-3 text-foreground-lighter group-hover:text-foreground\"\n        >\n          <svg\n            width=\"100%\"\n            height=\"100%\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n          >\n            <path\n              d={product.icon}\n              stroke=\"currentColor\"\n              strokeWidth={1.5}\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n        </motion.div>\n        <div className=\"text-foreground flex justify-center relative opacity-70 md:absolute md:bottom-0 md:opacity-0 group-hover:opacity-100 transition-opacity md:translate-y-8 md:-left-20 md:md:-right-20 font-mono uppercase text-center text-xs mt-2\">\n          {product.name}\n        </div>\n      </a>\n    </motion.div>\n  )\n}\n\nconst products = {\n  database: {\n    shortname: PRODUCT_SHORTNAMES.DATABASE,\n    name: PRODUCT_NAMES.DATABASE,\n    icon: PRODUCTS.database.icon[24],\n    description:\n      \"Every project is a full Postgres database, the world's most trusted relational database.\",\n    description_short: \"\",\n    label: \"\",\n    url: \"/database\",\n  },\n  authentication: {\n    shortname: PRODUCT_SHORTNAMES.AUTHENTICATION,\n    name: PRODUCT_NAMES.AUTHENTICATION,\n    icon: PRODUCTS.authentication.icon[24],\n    description:\n      \"Add user sign ups and logins, securing your data with Row Level Security.\",\n    description_short: \"\",\n    label: \"\",\n    url: \"/auth\",\n  },\n  storage: {\n    shortname: PRODUCT_SHORTNAMES.STORAGE,\n    name: PRODUCT_NAMES.STORAGE,\n    icon: PRODUCTS.storage.icon[24],\n    description:\n      \"Store, organize, and serve large files. Any media, including videos and images.\",\n    description_short: \"\",\n    label: \"\",\n    url: \"/storage\",\n  },\n  \"edge-functions\": {\n    shortname: PRODUCT_SHORTNAMES.FUNCTIONS,\n    name: PRODUCT_NAMES.FUNCTIONS,\n    icon: PRODUCTS.functions.icon[24],\n    description: \"Write custom code without deploying or scaling servers.\",\n    description_short: \"\",\n    label: \"\",\n    url: \"/edge-functions\",\n  },\n  realtime: {\n    shortname: PRODUCT_SHORTNAMES.REALTIME,\n    name: PRODUCT_NAMES.REALTIME,\n    icon: PRODUCTS.realtime.icon[24],\n    description:\n      \"Create multiplayer experiences by sharing, broadcasting, and listening to changes from other clients or the Database.\",\n    description_short: \"\",\n    label: \"\",\n    url: \"/realtime\",\n  },\n  vector: {\n    shortname: PRODUCT_SHORTNAMES.VECTOR,\n    name: PRODUCT_NAMES.VECTOR,\n    icon: PRODUCTS.vector.icon[24],\n    description:\n      \"Integrate your favorite ML-models to store, index and search vector embeddings.\",\n    description_short: \"\",\n    label: \"\",\n    url: \"/vector\",\n  },\n}\n\nexport default MagnifyAppIcons\n",
      "type": "registry:prodkt",
      "target": ""
    }
  ]
}