{
  "name": "shine",
  "type": "registry:effect",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "effects/shine.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport {\n  motion,\n  type AnimationProps,\n  type HTMLMotionProps,\n} from \"framer-motion\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst animationProps = {\n  initial: { \"--x\": \"100%\", scale: 0.8 },\n  animate: { \"--x\": \"-100%\", scale: 1 },\n  whileTap: { scale: 0.95 },\n  transition: {\n    repeat: Infinity,\n    repeatType: \"loop\",\n    repeatDelay: 1,\n    type: \"spring\",\n    stiffness: 20,\n    damping: 15,\n    mass: 2,\n    scale: {\n      type: \"spring\",\n      stiffness: 200,\n      damping: 5,\n      mass: 0.5,\n    },\n  },\n} as AnimationProps\n\ninterface ShinyButtonProps extends HTMLMotionProps<\"button\"> {\n  children: React.ReactNode\n  className?: string\n}\n\nconst ShinyButton = React.forwardRef<HTMLButtonElement, ShinyButtonProps>(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <motion.button\n        ref={ref}\n        {...animationProps}\n        {...props}\n        className={cn(\n          \"relative rounded-lg size-full px-6 py-2 font-medium backdrop-blur-xl transition-shadow duration-300 ease-in-out hover:shadow dark:bg-[radial-gradient(circle_at_50%_0%,var(--primary-11)_0%,transparent_60%)] dark:hover:shadow-[0_0_20px_var(--primary-11)]\",\n          className\n        )}\n      >\n        <span className=\"relative block size-full text-sm uppercase tracking-wide text-ghost-a9 dark:font-light dark:text-ghost-a11\">\n          {children}\n        </span>\n        <span\n          style={{\n            mask: \"linear-gradient(rgb(0,0,0), rgb(0,0,0)) content-box,linear-gradient(rgb(0,0,0), rgb(0,0,0))\",\n            maskComposite: \"exclude\",\n          }}\n          className=\"absolute inset-0 z-10 block rounded-[inherit] bg-[linear-gradient(-75deg,var(--primary-10)_calc(var(--x)+20%),var(--primary-11))_calc(var(--x)+25%),var(--primary)_calc(var(--x)+100%))] p-px\"\n        ></span>\n      </motion.button>\n    )\n  }\n)\n\nShinyButton.displayName = \"ShinyButton\"\n\nexport default ShinyButton\n",
      "type": "registry:effect",
      "target": ""
    }
  ]
}