{
  "name": "theme-switcher",
  "type": "registry:prodkt",
  "files": [
    {
      "path": "prodkt/theme-switcher.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/new-york/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\"\n\ntype Theme = {\n  value: string\n  label: string\n}\n\nconst radixColors = [\n  {\n    value: \"amber\",\n    label: \"Amber\",\n  },\n  {\n    value: \"blue\",\n    label: \"Blue\",\n  },\n  {\n    value: \"bronze\",\n    label: \"Bronze\",\n  },\n  {\n    value: \"brown\",\n    label: \"Brown\",\n  },\n  {\n    value: \"crimson\",\n    label: \"Crimson\",\n  },\n  {\n    value: \"cyan\",\n    label: \"Cyan\",\n  },\n  {\n    value: \"gold\",\n    label: \"Gold\",\n  },\n  {\n    value: \"grass\",\n    label: \"Grass\",\n  },\n  {\n    value: \"green\",\n    label: \"Green\",\n  },\n  {\n    value: \"indigo\",\n    label: \"Indigo\",\n  },\n  {\n    value: \"iris\",\n    label: \"Iris\",\n  },\n  {\n    value: \"jade\",\n    label: \"Jade\",\n  },\n  {\n    value: \"lime\",\n    label: \"Lime\",\n  },\n  {\n    value: \"mint\",\n    label: \"Mint\",\n  },\n  {\n    value: \"orange\",\n    label: \"Orange\",\n  },\n  {\n    value: \"pink\",\n    label: \"Pink\",\n  },\n  {\n    value: \"plum\",\n    label: \"Plum\",\n  },\n  {\n    value: \"purple\",\n    label: \"Purple\",\n  },\n  {\n    value: \"red\",\n    label: \"Red\",\n  },\n  {\n    value: \"ruby\",\n    label: \"Ruby\",\n  },\n  {\n    value: \"sky\",\n    label: \"Sky\",\n  },\n  {\n    value: \"teal\",\n    label: \"Teal\",\n  },\n  {\n    value: \"tomato\",\n    label: \"Tomato\",\n  },\n  {\n    value: \"violet\",\n    label: \"Violet\",\n  },\n  {\n    value: \"yellow\",\n    label: \"Yellow\",\n  },\n]\n\nconst radixGrayColors = [\n  {\n    value: \"gray\",\n    label: \"Gray\",\n  },\n  {\n    value: \"mauve\",\n    label: \"Mauve\",\n  },\n  {\n    value: \"slate\",\n    label: \"Slate\",\n  },\n  {\n    value: \"sage\",\n    label: \"Sage\",\n  },\n  {\n    value: \"olive\",\n    label: \"Olive\",\n  },\n  {\n    value: \"sand\",\n    label: \"Sand\",\n  },\n]\n\n// Mapping from primary colors to gray colors\nconst grayColorMapping: Record<string, string> = {\n  // mauve group\n  tomato: \"mauve\",\n  red: \"mauve\",\n  ruby: \"mauve\",\n  crimson: \"mauve\",\n  pink: \"mauve\",\n  plum: \"mauve\",\n  purple: \"mauve\",\n  violet: \"mauve\",\n  // slate group\n  iris: \"slate\",\n  indigo: \"slate\",\n  blue: \"slate\",\n  sky: \"slate\",\n  cyan: \"slate\",\n  // sage group\n  mint: \"sage\",\n  teal: \"sage\",\n  jade: \"sage\",\n  green: \"sage\",\n  // olive group\n  grass: \"olive\",\n  lime: \"olive\",\n  // sand group\n  gold: \"sand\",\n  yellow: \"sand\",\n  amber: \"sand\",\n  orange: \"sand\",\n  brown: \"sand\",\n}\n\nconst secondaryColorMapping: Record<string, string> = {\n  // mauve group\n  tomato: \"mauve\",\n  red: \"mauve\",\n  ruby: \"mauve\",\n  crimson: \"mauve\",\n  pink: \"mauve\",\n  plum: \"mauve\",\n  purple: \"mauve\",\n  violet: \"mauve\",\n  // slate group\n  iris: \"slate\",\n  indigo: \"slate\",\n  blue: \"slate\",\n  sky: \"slate\",\n  cyan: \"slate\",\n  // sage group\n  mint: \"sage\",\n  teal: \"sage\",\n  jade: \"sage\",\n  green: \"sage\",\n  // olive group\n  grass: \"olive\",\n  lime: \"olive\",\n  // sand group\n  gold: \"sand\",\n  yellow: \"sand\",\n  amber: \"sand\",\n  orange: \"sand\",\n  brown: \"sand\",\n}\n\nconst accentColorMapping: Record<string, string> = {\n  // mauve group\n  tomato: \"mauve\",\n  red: \"mauve\",\n  ruby: \"mauve\",\n  crimson: \"mauve\",\n  pink: \"mauve\",\n  plum: \"mauve\",\n  purple: \"mauve\",\n  violet: \"mauve\",\n  // slate group\n  iris: \"slate\",\n  indigo: \"slate\",\n  blue: \"slate\",\n  sky: \"slate\",\n  cyan: \"slate\",\n  // sage group\n  mint: \"sage\",\n  teal: \"sage\",\n  jade: \"sage\",\n  green: \"sage\",\n  // olive group\n  grass: \"olive\",\n  lime: \"olive\",\n  // sand group\n  gold: \"sand\",\n  yellow: \"sand\",\n  amber: \"sand\",\n  orange: \"sand\",\n  brown: \"sand\",\n}\n\nconst themes: Theme[] = [...radixColors, ...radixGrayColors]\n\nexport function ThemeSwitcher() {\n  const [mounted, setMounted] = React.useState(false)\n  const [open, setOpen] = React.useState(false)\n  const [selectedTheme, setSelectedTheme] = React.useState<Theme | null>(null)\n  const [selectedGray, setSelectedGray] = React.useState<Theme | null>(null)\n  const [selectedSecondary, setSelectedSecondary] =\n    React.useState<Theme | null>(null)\n  const [selectedAccent, setSelectedAccent] = React.useState<Theme | null>(null)\n  // const [selectedGray, setSelectedGray] = React.useState<Theme | \"mauve\">(\"mauve\")\n  // const [selectedSecondary, setSelectedSecondary] = React.useState<Theme | \"violet\">(\"violet\")\n  // const [selectedAccent, setSelectedAccent] = React.useState<Theme | \"violet\">(\"violet\")\n\n  const setThemeCookie = (value: string) => {\n    document.cookie = `primary-color=${value};path=/;max-age=31536000` // 1 year expiry\n    localStorage.setItem(\"primary-color\", value)\n    document.documentElement.setAttribute(\"data-primary-color\", value)\n\n    // Set the corresponding gray color based on the mapping\n    const mappedGray = grayColorMapping[value]\n    if (mappedGray) {\n      document.cookie = `gray-color=${mappedGray};path=/;max-age=31536000`\n      localStorage.setItem(\"gray-color\", mappedGray)\n      document.documentElement.setAttribute(\"data-gray-color\", mappedGray)\n    }\n\n    const mappedSecondary = secondaryColorMapping[value]\n    if (mappedSecondary) {\n      document.cookie = `secondary-color=${mappedSecondary};path=/;max-age=31536000`\n      localStorage.setItem(\"secondary-color\", mappedSecondary)\n      document.documentElement.setAttribute(\n        \"data-secondary-color\",\n        mappedSecondary\n      )\n    }\n\n    const mappedAccent = accentColorMapping[value]\n    if (mappedAccent) {\n      document.cookie = `accent-color=${mappedAccent};path=/;max-age=31536000`\n      localStorage.setItem(\"accent-color\", mappedAccent)\n      document.documentElement.setAttribute(\"data-accent-color\", mappedAccent)\n    }\n  }\n\n  const [theme, setThemeState] = React.useState<Theme | \"lime\">(\"lime\")\n  const [gray, setGrayState] = React.useState<Theme | \"mauve\">(\"mauve\")\n  const [secondary, setSecondaryState] = React.useState<Theme | \"mauve\">(\n    \"mauve\"\n  )\n  const [accent, setAccentState] = React.useState<Theme | \"mauve\">(\"mauve\")\n\n  React.useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  React.useEffect(() => {\n    const isThemeState = localStorage.getItem(\"primary-color\")\n    const isGrayState = localStorage.getItem(\"gray-color\")\n    const isSecondaryState = localStorage.getItem(\"secondary-color\")\n    const isAccentState = localStorage.getItem(\"accent-color\")\n\n    const foundTheme = themes.find((theme) => theme.value === isThemeState)\n\n    // If we have a primary theme, get its mapped gray color\n    const mappedGray = foundTheme ? grayColorMapping[foundTheme.value] : null\n    const foundGray = themes.find(\n      (theme) => theme.value === (mappedGray || isGrayState)\n    )\n\n    const mappedSecondary = foundTheme\n      ? secondaryColorMapping[foundTheme.value]\n      : null\n    const foundSecondary = themes.find(\n      (theme) => theme.value === (mappedSecondary || isSecondaryState)\n    )\n\n    const mappedAccent = foundTheme\n      ? accentColorMapping[foundTheme.value]\n      : null\n    const foundAccent = themes.find(\n      (theme) => theme.value === (mappedAccent || isAccentState)\n    )\n\n    setSelectedTheme(foundTheme || null)\n    setSelectedGray(foundGray || null)\n    setSelectedSecondary(foundSecondary || null)\n    setSelectedAccent(foundAccent || null)\n\n    setThemeState(foundTheme || \"lime\")\n    setGrayState(foundGray || \"mauve\")\n    setSecondaryState(foundSecondary || \"mauve\")\n    setAccentState(foundAccent || \"mauve\")\n\n    // Update all theme attributes\n    setThemeCookie(foundTheme?.value || \"lime\")\n  }, [setSelectedTheme])\n\n  return (\n    <div className=\"flex items-center space-x-4 [&_button]:rounded-full [&_button]:focus:rounded-full [&_button]:focus-visible:rounded-full\">\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"sparkstack-border min-w-fit rounded-full\"\n          >\n            {selectedTheme ? (\n              <>\n                <Circle\n                  size={24}\n                  stroke={`var(--${selectedTheme.value || \"lime\"}-9)`}\n                  fill={`var(--${selectedTheme.value || \"lime\"}-a7)`}\n                  className={`ring-offset- shrink-0 scale-[2] ring-offset-0 focus-visible:rounded-full before:focus-visible:rounded-full after:focus-visible:rounded-full${\n                    selectedTheme.value || \"lime\"\n                  }-9 text-shadow-${selectedTheme.value || \"lime\"}-9 text-${\n                    selectedTheme.value || \"lime\"\n                  }-9 stroke-${selectedTheme.value || \"lime\"}-9 fill-${\n                    selectedTheme.value || \"lime\"\n                  }-a7`}\n                />\n                <span className=\"sr-only\">{selectedTheme.label}</span>\n              </>\n            ) : (\n              <>\n                <span className=\"px-2\">Set theme</span>\n              </>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"p-0\" side=\"right\" align=\"start\">\n          <Command>\n            <CommandInput placeholder=\"Change theme...\" />\n            <CommandList className=\"\">\n              <CommandEmpty>No results found.</CommandEmpty>\n              <CommandGroup\n                className={`w-full [&>_div]:grid [&>_div]:w-full [&>_div]:grid-flow-row [&>_div]:grid-cols-2 [&>_div]:gap-1`}\n              >\n                {themes.map((theme) => (\n                  <CommandItem\n                    key={theme.value}\n                    value={theme.value}\n                    onSelect={(value) => {\n                      const selectedTheme =\n                        themes.find((theme) => theme.value === value) || null\n                      setSelectedTheme(selectedTheme)\n                      setThemeState(selectedTheme || \"lime\")\n                      setThemeCookie(value)\n                      setOpen(false)\n                    }}\n                    style={{\n                      border: `1px solid var(--${theme.value}-4)`,\n                      backgroundColor: `var(--${theme.value}-1)`,\n                    }}\n                    className={`after:bg-[var(-- relative bg-inherit after:absolute after:inset-0 after:z-10${theme.value}-4)] max-w-1/2 flex w-auto shrink grow-0 basis-1/2 flex-col items-start justify-start gap-1 px-3 py-2 after:opacity-0 after:transition-opacity after:duration-300 after:ease-in-out hover:after:opacity-100 `}\n                  >\n                    <div className=\"flex flex-row items-center space-x-[-4px]\">\n                      <Circle\n                        stroke={`var(--${theme.value || \"lime\"}-9)`}\n                        fill={`var(--${theme.value || \"lime\"}-9)`}\n                        className={cn(\n                          `!text- h-4 w-4 shrink-0${\n                            theme.value || \"lime\"\n                          }-9 !stroke-${theme.value || \"lime\"}-9 !fill-${\n                            theme.value || \"lime\"\n                          }-9`,\n                          theme.value === selectedTheme?.value\n                            ? \"opacity-100\"\n                            : \"opacity-40\"\n                        )}\n                      />\n                      <Circle\n                        stroke={`var(--${theme.value || \"lime\"}-7)`}\n                        fill={`var(--${theme.value || \"lime\"}-7)`}\n                        className={cn(\n                          `!text- h-4 w-4 shrink-0${\n                            theme.value || \"lime\"\n                          }-9 !stroke-${theme.value || \"lime\"}-9 !fill-${\n                            theme.value || \"lime\"\n                          }-9`,\n                          theme.value === selectedTheme?.value\n                            ? \"opacity-100\"\n                            : \"opacity-40\"\n                        )}\n                      />\n                      <Circle\n                        stroke={`var(--${theme.value || \"lime\"}-5)`}\n                        fill={`var(--${theme.value || \"lime\"}-5)`}\n                        className={cn(\n                          `!text- h-4 w-4 shrink-0${\n                            theme.value || \"lime\"\n                          }-9 !stroke-${theme.value || \"lime\"}-9 !fill-${\n                            theme.value || \"lime\"\n                          }-9`,\n                          theme.value === selectedTheme?.value\n                            ? \"opacity-100\"\n                            : \"opacity-40\"\n                        )}\n                      />\n                    </div>\n                    <span className=\"\">{theme.label}</span>\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}\n",
      "type": "registry:prodkt",
      "target": ""
    }
  ]
}