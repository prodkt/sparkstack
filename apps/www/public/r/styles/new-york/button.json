{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Fragment, useCallback } from \"react\"\nimport dynamic from \"next/dynamic\"\nimport { Slot } from \"@radix-ui/react-slot\"\n\nimport { cn } from \"@/lib/utils\"\nimport { useRipple } from \"@/registry/new-york/hooks/use-ripple\"\nimport {\n  buttonVariants,\n  buttonVariantsConfig,\n  nexsaleButtonVariants,\n  nexsaleButtonVariantsConfig,\n  type ButtonProps,\n} from \"@/registry/new-york/lib/buttonUtils\"\n\nexport * from \"@/registry/new-york/lib/buttonUtils\"\n\nconst Ripple = dynamic(\n  () => import(\"@/registry/new-york/ui/ripple\").then((mod) => mod.default),\n  {\n    ssr: false,\n  }\n)\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      bordered,\n      nexsale = false,\n      asChild = false,\n      disableRipple = false,\n      onClick,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { ripples, onClick: onRippleClickHandler, onClear } = useRipple()\n\n    const handleClick = useCallback(\n      (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        onRippleClickHandler(e)\n        onClick?.(e)\n      },\n      [onClick, onRippleClickHandler]\n    )\n\n    const getRippleProps = useCallback(\n      () => ({ ripples, onClear }),\n      [ripples, onClear]\n    )\n\n    const combinedClassName = cn(\n      \"flex items-center justify-center p-0\",\n      nexsale\n        ? nexsaleButtonVariants({\n            variant:\n              variant as keyof typeof nexsaleButtonVariantsConfig.variants.variant,\n            size: size as keyof typeof nexsaleButtonVariantsConfig.variants.size,\n            bordered,\n            className,\n          })\n        : buttonVariants({\n            variant:\n              variant as keyof typeof buttonVariantsConfig.variants.variant,\n            size: size as keyof typeof buttonVariantsConfig.variants.size,\n            className,\n          })\n    )\n\n    const content = (\n      <Fragment>\n        {children}\n        {!disableRipple && <Ripple {...getRippleProps()} />}\n      </Fragment>\n    )\n\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        {...props}\n        className={combinedClassName}\n        ref={ref}\n        onClick={handleClick}\n      >\n        {asChild ? children : content}\n      </Comp>\n    )\n  }\n) as React.ForwardRefExoticComponent<\n  ButtonProps & React.RefAttributes<HTMLButtonElement>\n> & {\n  displayName?: string\n}\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants, nexsaleButtonVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}