{
  "name": "use-ripple",
  "type": "registry:hook",
  "registryDependencies": [
    "dom-animation"
  ],
  "files": [
    {
      "path": "hooks/use-ripple.ts",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useCallback, useState } from \"react\"\n\nimport { getUniqueID } from \"../lib/utils\"\n\nexport type RippleType = {\n  key: React.Key\n  x: number\n  y: number\n  size: number\n}\n\nexport interface UseRippleProps {}\n\nexport const useRipple = function useRipple() {\n  const [ripples, setRipples] = useState<RippleType[]>([])\n\n  const onClick = useCallback(\n    (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      const trigger = event.currentTarget\n      const size = Math.max(trigger.clientWidth, trigger.clientHeight)\n      const rect = trigger.getBoundingClientRect()\n\n      setRipples((prevRipples) => [\n        ...prevRipples,\n        {\n          key: getUniqueID(prevRipples.length.toString()),\n          size,\n          x: event.clientX - rect.left - size / 2,\n          y: event.clientY - rect.top - size / 2,\n        },\n      ])\n    },\n    []\n  )\n\n  const onClear = useCallback((key: React.Key) => {\n    setRipples((prevState) => prevState.filter((ripple) => ripple.key !== key))\n  }, [])\n\n  return { ripples, onClick, onClear } as const\n}\n\nexport type UseRippleReturn = ReturnType<typeof useRipple>\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "lib/dom-animation.ts",
      "content": "import { domAnimation } from \"framer-motion\"\n\nexport default domAnimation\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}